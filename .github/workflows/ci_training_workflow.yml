name: ML Model CI Training and Docker Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  train-and-build-docker:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -el {0}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install git and jq (system-wide)
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git jq
        echo "Verifying git installation (system-wide):"
        /usr/bin/git --version
        echo "Verifying jq installation (system-wide):"
        jq --version

    - name: Set up Miniconda
      id: setup_conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.9' 
        channels: conda-forge,defaults
        auto-activate-base: true 
        use-mamba: false

    - name: Install MLflow and GitPython in Conda base
      run: |
        echo "--- Verifying Conda Setup for MLflow Installation ---"
        echo "PATH: $PATH"
        echo "CONDA_PREFIX: $CONDA_PREFIX"
        echo "Which conda: $(which conda)"
        conda info --envs
        echo "Which python: $(which python)"
        python --version
        echo "Which pip: $(which pip)"
        pip --version
        echo "Installing MLflow (specific version) and GitPython using pip from active Conda env..."
        python -m pip install "mlflow>=2.0.0,<3.0.0" GitPython
        echo "Verifying MLflow version (running as module)..."
        python -m mlflow --version
        echo "Verifying GitPython version..."
        python -c "import git; print(f'GitPython version: {git.__version__}')"

    - name: Run MLflow Project and Capture Run ID
      id: mlflow_run_step
      env:
        GIT_PYTHON_GIT_EXECUTABLE: /usr/bin/git
        MLFLOW_TRACKING_URI: "file://${{ github.workspace }}/MLProject_training/mlruns"
        EXPERIMENT_NAME_FOR_PYTHON: "CI Bitcoin Price Prediction" 
      run: |
        python --version
        echo "Running MLflow project for experiment: $EXPERIMENT_NAME_FOR_PYTHON"
        echo "MLFLOW_TRACKING_URI for run: $MLFLOW_TRACKING_URI"
        
<<<<<<< HEAD
        # Jalankan MLflow run seperti biasa
        python -m mlflow run MLProject_training/ --experiment-name "$EXPERIMENT_NAME_FOR_PYTHON"
        
        echo "Fetching latest Run ID using dedicated Python script..."
        # Memanggil skrip Python eksternal. 'python' di sini akan merujuk ke Python dari Conda base yang aktif.
        LATEST_RUN_ID=$(python scripts/get_latest_run_id.py)
        
        if [ $? -ne 0 ] || [ -z "$LATEST_RUN_ID" ] || [ "$LATEST_RUN_ID" == "null" ]; then
          echo "Bash script Error: Could not find latest Run ID using Python script (scripts/get_latest_run_id.py)."
# Kode Python dimulai di sini. Indentasi Python standar.
# Tidak ada indentasi YAML tambahan pada baris 'import mlflow' ini.

tracking_uri_py = os.environ.get("MLFLOW_TRACKING_URI") # Menggunakan kutip ganda untuk string Python
if tracking_uri_py:
    mlflow.set_tracking_uri(tracking_uri_py)
    print(f"Python script: MLFLOW_TRACKING_URI set to {tracking_uri_py}")
else:
    print("Python script Error: MLFLOW_TRACKING_URI environment variable not found.")
    exit(1)

experiment_name_py = os.environ.get("EXPERIMENT_NAME_FOR_PYTHON") # Menggunakan kutip ganda
if not experiment_name_py:
    print("Python script Error: EXPERIMENT_NAME_FOR_PYTHON environment variable not found.")
    exit(1)
print(f"Python script: Searching for experiment named \"{experiment_name_py}\"")

try:
    experiment = mlflow.get_experiment_by_name(experiment_name_py)
    if experiment is None:
        print(f"Python script Error: Experiment \"{experiment_name_py}\" not found via API.")
        exit(1)
    experiment_id = experiment.experiment_id
    print(f"Python script: Found Experiment ID: {experiment_id}")
    
    runs_df = mlflow.search_runs(experiment_ids=[experiment_id], order_by=["attributes.start_time DESC"], max_results=1) # kutip ganda untuk list
    
    if runs_df.empty:
        print(f"Python script Error: No runs found in experiment \"{experiment_name_py}\" (ID: \"{experiment_id}\").")
        exit(1)
    
    latest_run_id_py = runs_df.iloc[0]["run_id"] # kutip ganda untuk akses kolom
    print(latest_run_id_py)

except Exception as e:
    print(f"Python script execution error: {e}")
    exit(1)
') # Akhir dari python -c '...'
        
        if [ -z "$LATEST_RUN_ID" ] || [ "$LATEST_RUN_ID" == "null" ]; then
          echo "Bash script Error: Could not find latest Run ID using Python API."
          echo "Bash script LATEST_RUN_ID_content: [$LATEST_RUN_ID]"
          exit 1
        fi
        echo "Latest Run ID is: $LATEST_RUN_ID"
        echo "run_id=$LATEST_RUN_ID" >> $GITHUB_OUTPUT

    # ... (sisa workflow YAML tetap sama seperti sebelumnya) ...
    - name: Log in to Docker Hub
      if: success()
>>>>>>> 60050ff0c0f31a6a5a1bb4e508f04ee5b192b8ca
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push Docker image using MLflow
      env:
        GIT_PYTHON_GIT_EXECUTABLE: /usr/bin/git
        MLFLOW_TRACKING_URI: "file://${{ github.workspace }}/MLProject_training/mlruns"
      run: |
        RUN_ID="${{ steps.mlflow_run_step.outputs.run_id }}"
        if [ -z "$RUN_ID" ]; then
          echo "Error: Could not determine Run ID from previous step."
          exit 1
        fi
        echo "Using Run ID: $RUN_ID untuk membangun Docker image."
        
        MODEL_ARTIFACT_PATH="best-randomforest-model" 
        MODEL_URI="runs:/$RUN_ID/$MODEL_ARTIFACT_PATH"
        IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/bitcoin-price-predictor:latest" 
        
        echo "Model URI: $MODEL_URI"
        echo "Image Name: $IMAGE_NAME"

        echo "MLFLOW_TRACKING_URI for build-docker is set to: $MLFLOW_TRACKING_URI"
        
        python -m mlflow models build-docker \
          --model-uri "$MODEL_URI" \
          --name "$IMAGE_NAME" \
          --enable-mlserver

        echo "Pushing Docker image to Docker Hub..."
        docker push "$IMAGE_NAME"

    - name: Upload MLflow run artifacts
      if: always() # Selalu jalankan langkah ini, bahkan jika langkah sebelumnya gagal
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-run-artifacts
        path: MLProject_training/mlruns/
        retention-days: 7
