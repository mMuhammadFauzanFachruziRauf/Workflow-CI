name: ML Model CI Training and Docker Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  train-and-build-docker:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -el {0}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install git and jq (system-wide)
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git jq
        echo "Verifying git installation (system-wide):"
        /usr/bin/git --version
        echo "Verifying jq installation (system-wide):"
        jq --version

    - name: Set up Miniconda
      id: setup_conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.9'
        channels: conda-forge,defaults
        auto-activate-base: true
        use-mamba: false

    - name: Install MLflow and GitPython in Conda base
      run: |
        echo "--- Verifying Conda Setup for MLflow Installation ---"
        echo "PATH: $PATH"
        echo "CONDA_PREFIX: $CONDA_PREFIX"
        echo "Which conda: $(which conda)"
        conda info --envs
        echo "Which python: $(which python)"
        python --version
        echo "Which pip: $(which pip)"
        pip --version
        echo "Installing MLflow (specific version) and GitPython using pip from active Conda env..."
        python -m pip install "mlflow>=2.0.0,<3.0.0" GitPython
        echo "Verifying MLflow version (running as module)..."
        python -m mlflow --version
        echo "Verifying GitPython version..."
        python -c "import git; print(f'GitPython version: {git.__version__}')"

    - name: Run MLflow Project and Capture Run ID
      id: mlflow_run_step
      env:
        GIT_PYTHON_GIT_EXECUTABLE: /usr/bin/git
        # Set MLFLOW_TRACKING_URI agar skrip Python API bisa menemukan mlruns dengan benar
        MLFLOW_TRACKING_URI: "file://$(pwd)/MLProject_training/mlruns"
      run: |
        echo "--- Verifying Environment for MLflow Run ---"
        echo "Current PATH: $PATH"
        echo "Which python: $(which python)"
        python --version
        
        EXPERIMENT_NAME_CI="CI Bitcoin Price Prediction"
        echo "Running MLflow project for experiment: $EXPERIMENT_NAME_CI"
        echo "MLFLOW_TRACKING_URI for run: $MLFLOW_TRACKING_URI"
        
        # Jalankan MLflow run. Ini akan membuat eksperimen jika belum ada.
        python -m mlflow run MLProject_training/ --experiment-name "$EXPERIMENT_NAME_CI"
        
        # Setelah mlflow run selesai, dapatkan run ID terbaru menggunakan Python API MLflow
        echo "Fetching latest Run ID using Python API..."
        LATEST_RUN_ID=$(python -c "
import mlflow
import os
# Set tracking URI di dalam skrip Python juga, untuk memastikan konsistensi
# Meskipun sudah diset sebagai env var, ini membuatnya lebih eksplisit.
mlflow.set_tracking_uri(os.environ.get('MLFLOW_TRACKING_URI'))
experiment_name = '$EXPERIMENT_NAME_CI'
experiment = mlflow.get_experiment_by_name(experiment_name)
if experiment is None:
    print(f'Error: Experiment {experiment_name} not found via API.')
    # Coba list semua eksperimen untuk debugging
    # print('Available experiments:')
    # for exp in mlflow.search_experiments():
    #    print(f'- {exp.name} (ID: {exp.experiment_id})')
    exit(1)
experiment_id = experiment.experiment_id
runs = mlflow.search_runs(experiment_ids=[experiment_id], order_by=['attributes.start_time DESC'], max_results=1)
if runs.empty:
    print(f'Error: No runs found in experiment {experiment_name} (ID: {experiment_id}).')
    exit(1)
print(runs.iloc[0].run_id)
")
        
        if [ -z "$LATEST_RUN_ID" ] || [ "$LATEST_RUN_ID" == "null" ]; then
          echo "Error: Could not find latest Run ID using Python API."
          exit 1
        fi
        echo "Latest Run ID is: $LATEST_RUN_ID"
        echo "run_id=$LATEST_RUN_ID" >> $GITHUB_OUTPUT

    - name: Log in to Docker Hub
      if: success()
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push Docker image using MLflow
      if: success()
      env:
        GIT_PYTHON_GIT_EXECUTABLE: /usr/bin/git
        # MLFLOW_TRACKING_URI akan diset lagi di sini untuk build-docker
      run: |
        RUN_ID="${{ steps.mlflow_run_step.outputs.run_id }}"
        if [ -z "$RUN_ID" ]; then
          echo "Error: Could not determine Run ID from previous step."
          exit 1
        fi
        echo "Using Run ID: $RUN_ID untuk membangun Docker image."
        
        MODEL_ARTIFACT_PATH="best-randomforest-model" 
        MODEL_URI="runs:/$RUN_ID/$MODEL_ARTIFACT_PATH"
        IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/bitcoin-price-predictor:latest" 
        
        echo "Model URI: $MODEL_URI"
        echo "Image Name: $IMAGE_NAME"

        # Set MLFLOW_TRACKING_URI agar mlflow models tahu di mana mencari run lokal
        export MLFLOW_TRACKING_URI="file://$(pwd)/MLProject_training/mlruns"
        echo "MLFLOW_TRACKING_URI for build-docker is set to: $MLFLOW_TRACKING_URI"
        
        python -m mlflow models build-docker \
          --model-uri "$MODEL_URI" \
          --name "$IMAGE_NAME" \
          --enable-mlserver

        echo "Pushing Docker image to Docker Hub..."
        docker push "$IMAGE_NAME"

    - name: Upload MLflow run artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-run-artifacts
        path: MLProject_training/mlruns/
        retention-days: 7
